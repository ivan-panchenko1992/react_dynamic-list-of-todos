{"version":3,"sources":["components/Form/SearchForm.jsx","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","Api.js","App.jsx","index.js"],"names":["SearchForm","searchTitle","filterTodoByTitle","handleChange","htmlFor","className","type","placeholder","id","value","onChange","event","TodoList","state","searchOption","todos","props","todosFromServer","target","setState","filter","todo","title","toLowerCase","includes","filterTodosByOptions","item","completed","chooseUser","this","prepearedTodos","map","key","classNames","onClick","userId","React","Component","CurrentUser","user","clearUser","name","email","phone","request","url","fetch","then","response","ok","Error","json","result","data","App","users","selectedUserId","userID","a","length","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.489d83c4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const SearchForm = ({\n  searchTitle,\n  filterTodoByTitle,\n  handleChange,\n}) => (\n  <form>\n    <label\n      htmlFor=\"title\"\n      className=\"label\"\n    >\n      Search title\n    </label>\n    <input\n      type=\"text\"\n      placeholder=\"Enter the title\"\n      id=\"title\"\n      className=\"input is-normal\"\n      value={searchTitle}\n      onChange={(event) => {\n        filterTodoByTitle(event);\n      }}\n    />\n    <select\n      className=\"select is-info\"\n      onChange={(event) => {\n        handleChange(event);\n      }}\n    >\n      <option\n        value=\"All\"\n      >\n        All\n      </option>\n      <option\n        value=\"Active\"\n      >\n        Active\n      </option>\n      <option\n        value=\"Completed\"\n      >\n        Complete\n      </option>\n    </select>\n  </form>\n);\n\nSearchForm.propTypes = {\n  searchTitle: PropTypes.string.isRequired,\n  filterTodoByTitle: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { SearchForm } from '../Form/SearchForm';\n\nexport class TodoList extends React.Component {\n  state = {\n    searchOption: '',\n    searchTitle: '',\n    todos: this.props.todosFromServer,\n  }\n\n  filterTodoByTitle = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      searchTitle: value,\n      todos: this.props.todosFromServer\n        .filter(todo => todo.title.toLowerCase()\n          .includes(value.toLowerCase())),\n    });\n  }\n\n  handleChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({ searchOption: value });\n  }\n\n  filterTodosByOptions = (todos) => {\n    const { searchOption } = this.state;\n\n    switch (searchOption) {\n      case 'Active':\n        return todos.filter(item => !item.completed);\n\n      case 'Completed':\n        return todos.filter(item => item.completed);\n      default:\n        return todos;\n    }\n  }\n\n  render() {\n    const { chooseUser } = this.props;\n    const { todos, searchTitle } = this.state;\n    const prepearedTodos = this.filterTodosByOptions(todos);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <SearchForm\n          searchTitle={searchTitle}\n          filterTodoByTitle={this.filterTodoByTitle}\n          handleChange={this.handleChange}\n        />\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {prepearedTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames('TodoList__item', {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n              >\n                <label>\n                  <p>{todo.completed ? '✔' : '❌'}</p>\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  className=\"TodoList__user-button button\"\n                  type=\"button\"\n                  onClick={() => chooseUser(todo.userId)}\n                >\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todosFromServer: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  chooseUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\n\nexport const CurrentUser = ({ user, clearUser }) => (\n  <div className=\"CurrentUser\">\n    <button\n      type=\"button\"\n      onClick={clearUser}\n    >\n      clear\n    </button>\n    <h2 className=\"CurrentUser__title\">\n      <span>\n        {`Selected user: ${user.id}`}\n      </span>\n    </h2>\n\n    <h3 className=\"CurrentUser__name\">{user.name}</h3>\n    <p className=\"CurrentUser__email\">{user.email}</p>\n    <p className=\"CurrentUser__phone\">{user.phone}</p>\n  </div>\n);\n\nCurrentUser.propTypes = {\n  user: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n\n  }).isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com/';\n\nconst request = url => fetch(`${BASE_URL}${url}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw (new Error('failed Data'));\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const getTodos = () => request('todos')\n  .then(result => result.filter(todo => todo.title));\n\nexport const getUsers = () => request('users');\n","import React from 'react';\nimport 'bulma';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos, getUsers } from './Api';\n\nclass App extends React.Component {\n  state = {\n    users: [],\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const users = await getUsers();\n    const todos = await getTodos();\n\n    this.setState({\n      users,\n      todos,\n    });\n  }\n\n  chooseUser = (userID) => {\n    this.setState({ selectedUserId: userID });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { users, todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {\n            !!todos.length && (\n            <TodoList\n              todosFromServer={todos}\n              chooseUser={this.chooseUser}\n            />\n            )\n          }\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                user={users.find(user => user.id === selectedUserId)}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}